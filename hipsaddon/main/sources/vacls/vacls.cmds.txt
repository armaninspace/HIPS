*********************************************************************
Note: Only the first two characters in each commands are significant.
*********************************************************************

ao	- swop the order in which ACLS examines each attribute
	  when performing the attribute selections during the tree generation.
ap	- print out all active (see below) attributes.
as	- suppress an attribute, this makes it inactive and hence will
	  not be considered when a rule is induced.
ar	- release an attribute, this makes it active and hence 
	  will be considered when a rule is induced.
bool	- convert the example set to boolean examples. A class will
	  be requested and all examples of this class will remain
	  untouched, the rest will be relabeled with the class 'other'.
	  This is useful when investigating the use of a separate
	  tree (or concept) for each example class (see the concept command).
	  Note: the actual class values are stored rather than lost,
	  restoring the original class values can be achieved by using 
	  the bool command and selecting the class 'restore'.
build	- build rule, this induces a rule using the ID3 windowing technique.
	  Here secondary examples which contradict the induced rule
	  are placed in the primary store and the rule re-induced.
	  This process is repeated until the secondary store contains
	  no contradictions to the rule.
check	- check the secondary examples against a rule.
concept	- Induce a single concept tree for each class from the examples
	  contained in the training set.
dprim	- delete all of the examples in the primary store.
dsec	- delete all of the examples in the secondary store.
delete	- delete a range of examples.
help	- print this help message
iauto	- induce a rule from the examples in the primary store
	  using BS's automatic tree pruning method.
induce	- induce a rule from the examples in the primary store using
	  the ordinary ACLS algorithm.
move	- move range of examples from one store to the other.
print	- print out range of examples in attribute form.
quit	- quit this program
read	- read examples from a file, checking them against a specified rule.
	  Place contradictions in the primary store, ignore repeats,
	  and place the remainder in the secondary store.
rl1	- print rule with a number (unique for each leaf)  appended to 
	  end of each class.
rl2	- print rule with a number (unique for each class)  appended to 
	  end of each class.
rprim	- read examples from a file and place in the primary store.
rsec	- read examples from a file and place in the secondary store.
rtell	- read examples from a file, specifying where all repeat examples
	  and all clash examples are to go.
rule	- print a selected rule (or range of rules).
switch	- switch output between the terminal and a specified file.
tweak	- tweak system parameters
user	- enter users example reading routine
xpair	- classify all examples in the secondary store using a specified rule. 
	  Output the results as a series of 'true_class, classified_as' pairs.
Xpair	- .. as above but with relabeling of classes as in the command: rl1.
xsum	- classify all examples in the secondary store using a specified rule.
	  Output the a summary of the results, including a confusion matrix 
	  of the misclassifications.
Xsum	- .. as above but with relabeling of classes as in the command: rl1.

