#
# makefile for user-contributed/lbl/lib/libccs
#

DPIS = dpi.s
DIRS = $(DPIS)
ALL_OBJS = $(OBJECTS) $(DPIS)/*.o

OBJECTS = \
	arg_vc.o c_array.o buffernw.o colortog.o c_map.o c_map1.o \
	c_to_c.o colort90.o dbvfft3d.o dir_unix.o eta.o errors.o \
	filter_f.o fits_io.o fitshd.o fitsread.o fourier.o	\
	gaussian.o gif_r.o histgram.o icc_r.o io_ready.o	\
	ip-hdr.o checksum.o	\
	libpbm.o libpbm2.o libpbm4.o libpgm1.o libppm1.o libppm3.o \
	libpbm1.o message.o parsargu.o pict_r.o pgm_r.o pnm_r.o \
	piperead.o q_sort.o rotate90.o	\
	rast_r.o rast_w.o rle_r.o rle_w.o tiff_r.o t_consum.o	\
	tv_empty.o tv_random.o tvmath.o time-out.o	\
	to_sep.o to_8.o quantto8.o \
	sock_init.o sock_cnct.o sock_subr.o sock_xex.o sub_mean.o \
	table_if.o vfft3d.o vfft_2p.o zalloc.o zreopen.o
ANSI_OBJ =	\
	c_map1.o c_to_c.o buffernw.o checksum.o dir_unix.o fitshd.o	\
	gif_r.o ip-hdr.o piperead.o parsargu.o rast_r.o rast_w.o	\
	sock_cnct.o sock_init.o sock_subr.o sock_xex.o	\
	table_if.o tv_empty.o tvmath.o zreopen.o

LIBNAME = liblbl.a
LIBALIAS = libccs.a
LIBFLAG = -DCOMMON_TOOL -DEXTENDED_U_IMAGE
LOCALINC = $(CCS_ROOT)/include
LOCALCFLAGS = -I$(LOCALINC) $(LIBFLAG) $(ADD_FUNCS) $(RTP_FLAGS)

default install:	mkdest $(OBJECTS) $(LIBNAME)

ANSI2KNR = cp	# make non-ANSI anyway
include ansi-knr

zalloc.o:
	@$(ANSI2KNR) $< tmpansi.c
	$(COMPILEc) -I$(LOCALINC) -D_DEBUG_ tmpansi.c -o $*.o $(HP_FLAGS) -DUSE_SYS_TIME_H
	rm -f tmpansi.c


.c.o:	$(LOCALINC)/stdef.h $(LOCALINC)/imagedef.h
	$(COMPILEc) $(LOCALCFLAGS) -DQUANTIZING_TO_8 $*.c
	@-ld $(LDLIBFLAGS) $*.o
	@mv a.out $*.o

$(LIBNAME):	$(OBJECTS)
	@rm -f $(LIBNAME) tmpansi.c
	ar cr $(LIBNAME) `$(LORDER) $(ALL_OBJS) | $(TSORT)`;
	mv $(LIBNAME) $(LIBDIR)
	$(RANLIB) $(LIBDIR)/$(LIBNAME)
	@if test -f $(LIBDIR)/$(LIBALIAS); then	\
		rm -f $(LIBDIR)/$(LIBALIAS);	\
	else	true;	fi
	@ln -s $(LIBDIR)/$(LIBNAME) $(LIBDIR)/$(LIBALIAS);
	@touch $(LIBNAME)

clean:
	rm -f $(OBJECTS) $(LIBNAME) $(ANSI2KNR) $(DPIS)/*.o
clean-all:	clean clean_all

pristine:
	rm -f $(OBJECTS) $(LIBNAME) $(LIBDIR)/$(LIBNAME)

mkdest:
	@-if test 'x$(DIRS)' != x ;	then eval	\
	    'for d in $(DIRS) ; do	\
		( cd $$d ;	make install )	\
	    done' ;	else	: ;	fi

man:

doc:
