.TH H_DISCEDGE2 3 "8/8/91" "Version 2" "HIPS Manual"
.SH NAME
h_discedge2 \- a discrete domain regional edge detector with offsets
.SH SYNOPSIS
.nf
.ta 2i
#include <hipl_format.h>

h_discedge2(hdi,hdo,size,varcrit,edgethresh)
h_discedge2_b(hdi,hdo,size,varcrit,edgethresh)
h_discedge2_B(imagei,imageo,nr,nc,nlpi,nlpo,size,varcrit,edgethresh)

struct header *hdi,*hdo;
byte *imagei,*imageo;
int nr,nc,nlpi,nlpo,size,edgethresh;
float varcrit
.fi
.SH DESCRIPTION 
These routines apply a variant on Shaw's edge fitting algorithm
to an input subimage (specified by
.I hdi
or
.IR imagei ),
and store the result in the output subimage (specified by
.I hdo
or
.IR imageo ).
.I h_discedge2
calls
.I h_discedge2_b
as long as the input pixel format is byte.
.I h_discedge2_B
is the low-level routine which doesn't require an image header.  The subimage
size is
.I nr
by
.IR nc .
The input image has
.I nlpi
pixels per line, and the output image has
.I nlpo
pixels per line.
byte (with integer output)
.I Size
is the length of a side of the nonoverlapping domains in which
the algorithm operates,
.I varcrit
is the threshold on the variance
in the normalized region (normalized by mean only) below which no
edge is sought in that region, and
.I edgethresh
is a threshold applied to edge elements.
.PP
This program is an implementation of the discrete domain regional operator
described by G. B. Shaw (Computer Graphics and Image Processing, Volume 9,
1979, pp. 135-149.
The algorithm outlined therein is sketchy and contains errors, which
hopefully are corrected here.  Also, the article does not clarify what to do
with edges which appear to travel along a border of the region (the algorithm
purports to be symmetric with respect to horizontal and vertical edges, but
isn't really).  In this implementation, the first pixels on the light
side of a light/dark edge are marked, and when the light/dark boundary
travels along the boundary of the region, only the `middlemost' pixel is
marked, since otherwise horizontal edges will all include little `tails' at
an edge of each region.  Lastly, note that any excess after multiples of
size in rows and columns is not edge detected.
The computations are done with integer arithmetic with all pixels scaled by
size*size in order that the normalization by the mean can be exact.
.PP
This program is a modification of
.IR h_discedge (3)
in which the algorithm
operates twice on an image, at offsets of (0,0), (1,1),...,(size-1,size-1).
The edge value which the algorithm would give to a given pixel at a given
offset is thresholded by edge-thresh, and if above threshold, then a bit is
set in the output image at that pixel. Bit 0 is set for offset (0,0), bit 1
for offset (1,1), and so on. Thus, the output can be thresholded at 1 or 
(2**size)-1 to give the ``or'' or ``and'' of the two offset images,
respectively.  The output image is in byte format.
.SH "PIXEL FORMATS HANDLED DIRECTLY"
byte
.SH "REGION-OF-INTEREST"
Only the region-of-interest is processed.  The size of the region-of-interest
is taken from
.IR hdi .
The dimensions should be an even multiple of
.IR size .
.SH "IN-PLACE PROCESSING"
The image may not be processed in place.  In other words,
.I hdi
may not be the same as
.IR hdo ,
and
.I imagei
may not be the same as
.IR imageo .
.SH FILES
/usr/local/lib/libhipsh.a
.SH ERRORS
HE_ALLOC - can't allocate memory
.br
HE_FMTSUBR - can't handle this pixel format
.SH "SEE ALSO"
h_discedge(3)
.SH AUTHOR
Mike Landy 6/1/82
.br
HIPS 2 - msl - 8/8/91
