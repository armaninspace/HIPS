/*
 * Copyright (c) 1991 Michael Landy
 *
 * Disclaimer:  No guarantees of performance accompany this software,
 * nor is any responsibility assumed on the part of the authors.  All the
 * software has been tested extensively and every effort has been made to
 * insure its reliability.
 */

/*
 * subseq.c - extract a subsequence of frames or color planes
 *
 * Usage:	subseq [-f from [to [skip]]] [-c from [to [skip]]]
 *
 * defaults:
 * frames:	fromframe=0 (first frame)
 *		toframe=numframe-1 (last frame) if -f not specified
 *		toframe=fromframe               if -f specified
 *		increment=1
 *
 * color plane:	fromcolor=0 (first plane)
 *		tocolor=numcolor-1 (last plane) if -c not specified
 *		tocolor=fromcolor               if -c specified
 *		incrememt=1
 *
 * Load:	cc -o subseq subseq.c -lhips
 *
 * Y. Cohen 3/1/82
 * modified for lseek on disk files by Mike Landy 7/3/84
 * HIPS 2 - msl - 7/6/91
 */

#include <stdio.h>
#include <hipl_format.h>
#include <sys/types.h>
#include <sys/stat.h>

int types[] = {PFMSBF,PFLSBF,PFBYTE,PFSBYTE,PFSHORT,PFUSHORT,PFINT,PFUINT,
	PFFLOAT,PFDOUBLE,PFCOMPLEX,PFDBLCOM,PFINTPYR,PFFLOATPYR};
static Flag_Format flagfmt[] = {
	{"f",{LASTFLAG},1,{{PTINT,"-1","from"},{PTINT,"-1","to"},
		{PTINT,"1","increment"},LASTPARAMETER}},
	{"c",{LASTFLAG},1,{{PTINT,"-1","from"},{PTINT,"-1","to"},
		{PTINT,"1","increment"},LASTPARAMETER}},
	LASTFLAG};

main(argc,argv)

int argc;
char **argv;

{
	struct header hd;
	Filename filename;
	FILE *fp;
	int ffrom,fto,finc,cfrom,cto,cinc,nf,nc,i,j,lastpos,currfr,noc,nof,k;
	h_boolean piped = FALSE;
	struct stat buf;

	Progname = strsave(*argv);
	parseargs(argc,argv,flagfmt,&ffrom,&fto,&finc,&cfrom,&cto,&cinc,
		FFONE,&filename);
	fp = hfopenr(filename);
	fread_hdr_cpfa(fp,&hd,types,filename);
	nc = hd.numcolor;
	nf = hd.num_frame/nc;
	if (nf*nc != hd.num_frame)
		perr(HE_IMSG,"num_frame not a multiple of numcolor in header");
	if (ffrom<0) {
		ffrom = 0;
		fto = nf - 1;
	}
	else if (fto<0)
		fto = ffrom;
	if (ffrom > fto)
		perr(HE_MSG,"to-frame must not be less than from-frame");
	if (finc<1)
		perr(HE_MSG,"frame increment must be positive");
	if (cfrom<0) {
		cfrom = 0;
		cto = hd.numcolor - 1;
	}
	else if (cto<0)
		cto = cfrom;
	if (cfrom > cto)
		perr(HE_MSG,"to-color must not be less than from-color");
	if (cinc<1)
		perr(HE_MSG,"color increment must be positive");
	if (ffrom >= nf)
		perr(HE_MSG,"subsequence not in sequence");
	if (cfrom >= nc)
		perr(HE_MSG,"color subset not in color plane set");
	if (fto >= nf) {
		perr(HE_IMSG,"warning, some frames are not in input sequence");
		fto = nf-1;
	}
	if (cto >= nc) {
		perr(HE_IMSG,"warning, some colors are not in input sequence");
		cto = nc-1;
	}
	if (fseek(fp,0L,1) < 0)
		piped = TRUE;
	nof = 1 + ((fto-ffrom)/finc);
	noc = 1 + ((cto-cfrom)/cinc);
	hd.num_frame = nof*noc;
	hd.numcolor = noc;
	if (!piped) {
		fstat(0,&buf);
		if ((buf.st_mode & S_IFMT) == S_IFIFO)
			piped = TRUE;
	}
	write_headeru(&hd,argc,argv);
	lastpos = 0;
	for (i=0;i<nof;i++) {
	    for (j=0;j<noc;j++) {
		currfr = (ffrom+i*finc)*nc + cfrom + j*cinc;
		if (currfr != lastpos) {
			if (piped ||
			    fseek(fp,(currfr-lastpos)*hd.sizeimage,1) < 0) {
				piped = TRUE;
				for (k=lastpos;k<currfr;k++)
					fread_image(fp,&hd,k,filename);
			}
		}
		fread_image(fp,&hd,currfr,filename);
		write_image(&hd,i);
		lastpos = currfr + 1;
	    }
	}
	return(0);
}
