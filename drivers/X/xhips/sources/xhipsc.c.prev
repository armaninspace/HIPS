/*
 * About the same as xhips.c,but this one allows 8 bit display
 * on a 24 bit machine.
 *
 * debugging for 24 bits
 * It doesn't do clut for 24 bit displays yet.
 * Calls to GetColormap and GetColormap24 therefore differ
 * call to GetColormapThresh also differs!!
 *
 * added 24-bit color stuff - Ramin Samadani
 * HIPS-2 - msl - 10/20/92
 */

/***********************************************************************
*  File:   xhipsc.c
*  Author: Patrick J. Flynn,from `xim.c' by Philip Thompson
*  $Date: $
*  $Revision: $
*  Purpose: To view a HIPS-formatted image.
*
*  I (PJF) consider this a derivative of `xim',and include the original
*  copyright notice.
*
*  Copyright (c) 1988  Philip R. Thompson
*                Computer Resource Laboratory (CRL)
*                Dept. of Architecture and Planning
*                M.I.T.,Rm 9-526
*                Cambridge,MA  02139
*   This  software and its documentation may be used,copied,modified,
*   and distributed for any purpose without fee,provided:
*       --  The above copyright notice appears in all copies.
*       --  This disclaimer appears in all source code copies.
*       --  The names of M.I.T. and the CRL are not used in advertising
*           or publicity pertaining to distribution of the software
*           without prior specific written permission from me or CRL.
*   I provide this software freely as a public service.  It is NOT a
*   commercial product,and therefore is not subject to an an implied
*   warranty of merchantability or fitness for a particular purpose.  I
*   provide it as is,without warranty. This software was not sponsored,
*   developed or connected with any grants,funds,salaries,etc.
*
*   This software is furnished  only on the basis that any party who
*   receives it indemnifies and holds harmless the parties who furnish
*   it against any claims,demands,or liabilities connected with using
*   it,furnishing it to others,or providing it to a third party.
*
*   Philip R. Thompson (phils@athena.mit.edu)
***********************************************************************/
#ifndef LINT
static char xim_rcs_id[] =
"$ $";

#endif	/* LINT */

#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include <X11/cursorfont.h>
#include <stdio.h>
#include <hipl_format.h>

h_boolean debug_flag;
h_boolean hascmap = FALSE,usecmap = FALSE;
Display *dpy;
int screen;
Window root_win;
Visual *visual = NULL;
u_long blackpixel,whitepixel;
struct header hd,hdp;

static Flag_Format flagfmt[] = {
	{"d",{LASTFLAG},1,{{PTBOOLEAN,"FALSE"},{PTSTRING,"","display"},
		LASTPARAMETER}},
	{"c",{LASTFLAG},0,{{PTBOOLEAN,"FALSE"},LASTPARAMETER}},
	{"b",{LASTFLAG},0,{{PTBOOLEAN,"FALSE"},LASTPARAMETER}},
	{"g",{LASTFLAG},0,{{PTBOOLEAN,"FALSE"},LASTPARAMETER}},
	{"l",{LASTFLAG},1,{{PTBOOLEAN,"FALSE"},{PTFILENAME,"","lut-file"},
		LASTPARAMETER}},
	{"24",{"8",LASTFLAG},0,{{PTBOOLEAN,"FALSE"},LASTPARAMETER}},
	{"8",{"24",LASTFLAG},0,{{PTBOOLEAN,"FALSE"},LASTPARAMETER}},
	LASTFLAG};
int types[] = {PFBYTE,PFRGBZ,LASTTYPE};

main(argc,argv)
int argc;
char **argv;

{
	register unsigned i,j,k;
	register int *rgbzbuf;
	int default_depth,tmp;
	register byte *buffer,*red_buf,*grn_buf,*blu_buf,*icon_buf;
	register int *int_icon_buf;
	unsigned buf_size;
	int icon_width,icon_height,iconfact,method;
	int buf_width,buf_height,ncolors = 64;
	char *win_name = NULL,*display_name,*str_index,*calloc(),*malloc();
	h_boolean newmap_flag,dflag,gflag,lflag,do24_flag,do8_flag,rgbzim_flag;
	XColor colors[256],fore_color,back_color;
	Window image_win,icon_win;
	Colormap colormap,GetColormap(),GetColormap24();
	Visual *GetVisual();
	Colormap GetColormapThresh();
	XEvent event;
	XExposeEvent *expose;
	XCrossingEvent *xcrossing;
	GC image_gc,icon_gc;
	XGCValues gc_val;
	XSetWindowAttributes xswa;
	XImage *image = NULL,*icon_image = NULL;
	XSizeHints sizehints;
	XWMHints wmhints;
	char *clutFileName;
	FILE *fp;
	Filename filename;

	Progname = strsave(*argv);
	parseargs(argc,argv,flagfmt,&dflag,&display_name,&newmap_flag,
		&debug_flag,&gflag,&lflag,&clutFileName,&do24_flag,&do8_flag,
		FFONE,&filename);
	if (!dflag)
		display_name = NULL;
	if (!lflag)
		clutFileName = (char *) 0;
	if (gflag)
		ncolors = 256;

 /* Open the display & set defaults */

	if ((dpy = XOpenDisplay(display_name)) == NULL)
		error("Can't open display '%s'",XDisplayName(display_name));
	screen = XDefaultScreen(dpy);
	root_win = XDefaultRootWindow(dpy);

 /* Read header and verify image file formats */

	fp = hfopenr(filename);
	fread_hdr_a(fp,&hd);
	hascmap = (findparam(&hd,"cmap") != NULLPAR);
	method = fset_conversion(&hd,&hdp,types,filename);
	fread_imagec(fp,&hd,&hdp,method,0,filename);
	buf_width = hd.ocols;
	buf_height = hd.orows;
	fprintf(stderr,"size %d x %d\n",buf_height,buf_width);
	buf_size = buf_width * buf_height;
	buffer = hdp.image;
	rgbzbuf = (int *) hdp.image;
	rgbzim_flag = (hdp.pixel_format == PFRGBZ);

 /* figure out the root window depth */

	default_depth = DefaultDepth(dpy,screen);

 /* now set modes of operation */

	if (lflag) {
		if (hdp.pixel_format == PFRGBZ) {
			fprintf(stderr,
				"can't use lookup table with 24-bit images\n");
			exit(1);
		}
		if (do24_flag) {
			fprintf(stderr,
				"can't use lookup table in 24-bit mode\n");
			do24_flag = FALSE;
			do8_flag = TRUE;
		}
		ncolors = 256;
	}
	if (default_depth == 8 && hdp.pixel_format == PFRGBZ) {
		fprintf(stderr,
			"24 bit image thresholded to  8 bit default depth\n");
		ncolors = 256;
		do24_flag = FALSE;
		do8_flag = TRUE;
		newmap_flag = TRUE;
	}
	else if (default_depth == 8 && hdp.pixel_format == PFBYTE) {
		fprintf(stderr,"8 bit image with 8 bit default depth\n");
		do24_flag = FALSE;
		do8_flag = TRUE;
		if (!gflag && hascmap) {
			usecmap = TRUE;
			fprintf(stderr,"using colormap in image header\n");
			ncolors = 256;
		}
	}
	else if (default_depth == 24 && hdp.pixel_format == PFBYTE) {
		if (ncolors != 256)
			fprintf(stderr,"Warning: changed to 256 mode\n");
		ncolors = 256;
		do24_flag = FALSE;
		do8_flag = TRUE;
		fprintf(stderr,"8 bit image with 24 bit depth default\n");
		if (!gflag && hascmap) {
			usecmap = TRUE;
			fprintf(stderr,"using colormap in image header\n");
			ncolors = 256;
		}
	}
	else if (default_depth == 24 && hdp.pixel_format == PFRGBZ &&
	    !do8_flag) {
		ncolors = 256;
		do24_flag = TRUE;
		fprintf(stderr,"24 bit image with 24 bit depth default\n");
	}
	else if (default_depth == 24 && hdp.pixel_format == PFRGBZ &&
	    do8_flag) {
		ncolors = 256;
		do24_flag = FALSE;
		newmap_flag = TRUE;
		fprintf(stderr,"24 bit image displayed as 8 bit image, ");
		fprintf(stderr,"24 bit depth default\n");
	}
	else
		error("unknown depth and pixel formats\n","\0");
	if (do24_flag) {
		visual = GetVisual(dpy,screen,DirectColor,(unsigned) 24);
		if (visual == NULL) {
			fprintf(stderr,
				"couldn't get a 24 bit DirectColor Visual\n");
			exit(1);
		}
	}
	else {
		visual = GetVisual(dpy,screen,PseudoColor,(unsigned) 8);
		if (visual == NULL) {
			fprintf(stderr,
				"couldn't get an 8 bit PseudoColor visual\n");
			exit(1);
		}
	}
	blackpixel = XBlackPixel(dpy,screen);
	whitepixel = XWhitePixel(dpy,screen);
	if (XDisplayPlanes(dpy,screen) == 1)
		error("Can't display grayscale on monochrome screen","\0");

 /* Get or make the color table.  */

	if (!do24_flag) {
		if (hdp.pixel_format != PFBYTE) {
			colormap = GetColormapThresh(colors,
				&newmap_flag,rgbzbuf,buffer,buf_size);
		}

/* if 64-color map,reduce pixel values as well */

		if (ncolors == 64)
			for (i=0;i<buf_width*buf_height;i++)
				buffer[i] /= 4;
	}
	else {	/* X seems to want zbgr rather than rgbz!!! */
		for (i=0;i<buf_width*buf_height*4;i+=4) {
			buffer[i+3] = buffer[i];
			tmp = buffer[i+1];
			buffer[i+1] = buffer[i+2];
			buffer[i+2] = tmp;
		}
	}

/* Allocate the icon with max. dimension of 50 */

	iconfact = (buf_height / 50) > (buf_width / 50) ? (buf_height / 50)
		: (buf_width / 50);
	if (iconfact == 0)
		iconfact = 1;
	if ((icon_width = buf_width / iconfact + 1) % 2)
		icon_width -= 1;
	icon_height = buf_height / iconfact;
	if (debug_flag)
		fprintf(stderr,"icon width %d  height %d  factor %d\n",
			icon_width,icon_height,iconfact);
	if (do24_flag == FALSE) {
		icon_buf = (byte *) malloc((unsigned) icon_width * icon_height);
		if (icon_buf == NULL)
			error("Can't malloc() icon buffer","\0");
	}
	else {
		int_icon_buf =
			(int *) malloc((unsigned) icon_width*icon_height*4);
		if (int_icon_buf == NULL)
			error("Can't malloc() integer icon buffer","\0");
	}

 /* process and store the image and icon. */

	if (ncolors > 250 || do24_flag)	/* Don't bother trying to fit */
		newmap_flag = TRUE;	/* into default map,faster too */

	if (do24_flag == TRUE)
		colormap = GetColormap24(colors,ncolors,&newmap_flag,buffer,
			buf_size);
	else {
		if (!rgbzim_flag) {
			colormap = GetColormap(colors,ncolors,&newmap_flag,
				buffer,buf_size,clutFileName);
		}
	}

/* next line had 8 instead of DefaultDepth(dpy,screen) */
/* also had 8 bit instead of 32 bit padding */
/* This is for 8 bit images only right here */

	if (do24_flag == FALSE) {
		icon_image = XCreateImage(dpy,visual,(unsigned) 8,ZPixmap,
			0,(char *) icon_buf,icon_width,icon_height,8,0);
		for (i=0;i<icon_height;i++)
			for (j=0;j<icon_width;j++)
				XPutPixel(icon_image,j,i,
					(unsigned long) buffer[(i*buf_width+j)
						*iconfact]);
	}
	else {
		icon_image = XCreateImage(dpy,visual,(unsigned) 24,ZPixmap,
			0,(char *) int_icon_buf,icon_width,icon_height,8,0);
		for (i=0;i<icon_height;i++)
			for(j=0;j<icon_width;j++)
				XPutPixel(icon_image,j,i,(unsigned long)
				    rgbzbuf[(i*buf_width+j)*iconfact]);
	}
	if (do24_flag == TRUE)
/* WATCH OUT,should not be 32,but rgbzbuf should be 32 bits */
		image = XCreateImage(dpy,visual,(unsigned) 24,ZPixmap,0,
			(char *) rgbzbuf,buf_width,buf_height,8,0);
	else
		image = XCreateImage(dpy,visual,(unsigned) 8,ZPixmap,0,
			(char *) buffer,buf_width,buf_height,8,0);
	if (debug_flag)
		fprintf(stderr,"processed.\n");

 /* Get window attributes */

	xswa.event_mask = ExposureMask | ButtonPressMask | ColormapChangeMask |
		LeaveWindowMask | EnterWindowMask;
	xswa.background_pixel = blackpixel;
	xswa.border_pixel = blackpixel;
	xswa.colormap = colormap;
	xswa.cursor = XCreateFontCursor(dpy,XC_tcross);
	fore_color.red = fore_color.green = fore_color.blue = 0;
	back_color.red = back_color.green = back_color.blue = 0;
	XRecolorCursor(dpy,xswa.cursor,&fore_color,&back_color);
	if (do24_flag == TRUE) {
		image_win = XCreateWindow(dpy,root_win,0,0,
			buf_width,buf_height,5,(unsigned) 24,
			InputOutput,visual,CWBackPixel | CWEventMask |
			CWCursor | CWBorderPixel | CWColormap,&xswa);
		xswa.border_pixel = 1;	/* MAC hardwired */
		XSetWindowBorder(dpy,root_win,xswa.border_pixel);
		xswa.event_mask = ExposureMask;
/* added colormap to get it to work */
		icon_win = XCreateWindow(dpy,root_win,0,0,
			icon_width,icon_height,1,(unsigned) 24,
			InputOutput,visual,
			CWBackPixel | CWBorderPixel | CWColormap,&xswa);
	}
	else {

		image_win = XCreateWindow(dpy,root_win,0,0,
			buf_width,buf_height,5,8,
			InputOutput,visual,CWBackPixel | CWEventMask |
			CWCursor | CWBorderPixel | CWColormap,&xswa);
		xswa.border_pixel = 1;	/* MAC hardwired */
		XSetWindowBorder(dpy,root_win,xswa.border_pixel);
		xswa.event_mask = ExposureMask;
		icon_win = XCreateWindow(dpy,root_win,0,0,
			(unsigned int) icon_width,(unsigned int) icon_height,
			(unsigned int) 1,8,
			InputOutput,visual,
			CWBackPixel | CWBorderPixel | CWColormap,&xswa);
	}

 /* set window manager hints */
	sizehints.flags = PPosition | PSize | PMinSize | PMaxSize;
	sizehints.width = sizehints.min_width = buf_width;
	sizehints.max_width = buf_width;
	sizehints.height = sizehints.min_height = buf_height;
	sizehints.max_height = buf_height;
	sizehints.x = 0;
	sizehints.y = 0;
	XSetStandardProperties(dpy,image_win,"xhipsc2",win_name,
		None,argv,argc,&sizehints);
	wmhints.flags = IconWindowHint | IconPositionHint;
	wmhints.icon_window = icon_win;
	wmhints.icon_x = XDisplayWidth(dpy,screen) - 200;
	wmhints.icon_y = 2;
	XSetWMHints(dpy,image_win,&wmhints);
	gc_val.function = GXcopy;
	gc_val.plane_mask = AllPlanes;
	gc_val.foreground = blackpixel;
	gc_val.background = blackpixel;
	image_gc = XCreateGC(dpy,image_win,GCFunction | GCPlaneMask |
		GCForeground | GCBackground,&gc_val);
	icon_gc = XCreateGC(dpy,icon_win,GCFunction | GCPlaneMask |
		GCForeground | GCBackground,&gc_val);
	XMapWindow(dpy,image_win);	/* Map the image window. */
	if (newmap_flag) {
		XInstallColormap(dpy,colormap);
		if (ncolors > 254) {
	/* force the last two colors and sacrifice cursor */
			fore_color.red = colors[255].red;
			fore_color.green = colors[255].green;
			fore_color.blue = colors[255].blue;
			back_color.red = colors[254].red;
			back_color.green = colors[254].green;
			back_color.blue = colors[254].blue;
			fore_color.red = 0;	/* force to black */
			fore_color.green = 0;
			fore_color.blue = 0;
			back_color.red = 0;
			back_color.green = 0;
			back_color.blue = 0;
			XRecolorCursor(dpy,xswa.cursor,&fore_color,&back_color);
		}
	}

 /* Select events to listen for  */

	XSelectInput(dpy,image_win,(ButtonPressMask | ColormapChangeMask |
			ExposureMask | LeaveWindowMask | EnterWindowMask));
	XSelectInput(dpy,icon_win,ExposureMask);
	if (debug_flag)
		fprintf(stderr,"While loop.\n");
	expose = (XExposeEvent *) & event;
	xcrossing = (XCrossingEvent *) & event;
	while (1) {	/* Set up a loop to maintain the image. */
		XNextEvent(dpy,&event);	/* Wait on input event. */
		switch ((int) event.type) {
			int modulo;	/* Temporary var. for expose->x % 4 */
		case Expose:
			if (expose->window == icon_win) {
				XPutImage(dpy,icon_win,icon_gc,icon_image,0,0,
					0,0,icon_width,icon_height);
				break;
			}
			if (debug_flag)
			  fprintf(stderr,
			    "expose event x= %d y= %d width= %d height= %d\n",
				expose->x,expose->y,expose->width,
				expose->height);
			modulo = expose->x % 4;
			if (modulo != 0) {
				expose->x -= modulo;
				expose->width += modulo;
			}
			if (expose->width % 4 != 0)
				expose->width += 4 - (expose->width % 4);
			XPutImage(dpy,image_win,image_gc,image,
				expose->x,expose->y,expose->x,expose->y,
				expose->width,expose->height);
			if (debug_flag)
				fprintf(stderr,
					"Actual expose: %d  %d  %d  %d\n",
					expose->x,expose->y,expose->width,
					expose->height);
			break;
		case ButtonPress:
			switch ((int) event.xbutton.button) {
			case Button1:
				break;
			case Button2:
				break;
			case Button3:
				if (newmap_flag)
					XInstallColormap(dpy,
						XDefaultColormap(dpy,screen));
				XDestroyWindow(dpy,image_win);
				XDestroyWindow(dpy,icon_win);
				XCloseDisplay(dpy);
				exit(0);
			}
		case LeaveNotify:
			if (newmap_flag && (xcrossing->mode != NotifyGrab))
				XInstallColormap(dpy,
					XDefaultColormap(dpy,screen));
			break;
		case EnterNotify:
			if (newmap_flag && (xcrossing->mode != NotifyUngrab))
				XInstallColormap(dpy,colormap);
			break;
		case ColormapNotify:
		/* Don't do anything for now */
			break;
		default:
			fprintf(stderr,"Bad X event.\n");
		}
	}
}

Visual *GetVisual(displ,scrn,cls,dpth)

Display *displ;
int scrn;
int cls;
unsigned int dpth;

{
	XVisualInfo vTemplate;
	XVisualInfo *visualList;
	int visualsMatched;
	vTemplate.screen = screen;
	vTemplate.class = cls;
	vTemplate.depth = dpth;

	visualList = XGetVisualInfo(dpy,VisualScreenMask | VisualClassMask |
		VisualDepthMask,&vTemplate,&visualsMatched);
	if (visualsMatched == 0) {
		fprintf(stderr,
			"GetVisual,no visuals of specified type found\n");
		return (NULL);
	}
	else {
		if (debug_flag)
		    fprintf(stderr,
			"GetVisual,found %d visuals of type %d,depth %d \n",
			visualsMatched,cls,dpth);
		return (visualList[0].visual);
	}
}

Colormap GetColormap(colors,ncolors,newmap_flag,buf,bufsize,fname)

XColor colors[];
int ncolors;
h_boolean *newmap_flag;
register byte *buf;
unsigned bufsize;
char *fname;

{
	XColor clrs[256];
	register i,j;
	int numcol;
	Colormap cmap,cmap2;
	XColor qcolor;
	u_long GetColorValue();
	byte *pcmap;

	if (ncolors > XDisplayCells(dpy,screen))	/* an X nonfeature */
		ncolors = XDisplayCells(dpy,screen);
	if (usecmap) {
		numcol = 768;
		getparam(&hd,"cmap",PFBYTE,&numcol,&pcmap);
		if (numcol % 3)
			perr(HE_MSG,"colormap length not a multiple of 3");
		numcol /= 3;
		for (i=0;i<numcol;i++) {
			colors[i].pixel = (u_long) i;
			colors[i].red = (*(pcmap+i))<<8;
			colors[i].green = (*(pcmap+numcol+i))<<8;
			colors[i].blue = (*(pcmap+2*numcol+i))<<8;
			colors[i].flags = DoRed | DoGreen | DoBlue;
		}
		for (i=numcol;i<256;i++) {
			colors[i].pixel = (u_long) i;
			colors[i].red = colors[i].green = colors[i].blue = 0;
			colors[i].flags = DoRed | DoGreen | DoBlue;
		}
	}
	else if (fname == NULL) {
		for (i=0;i<ncolors;i++) {
			colors[i].pixel = (u_long) i;
			j = 256 * ((ncolors == 64) ? i * 4 : i);
			colors[i].red = colors[i].green = colors[i].blue = 
				(u_short) j;
			colors[i].flags = DoRed | DoGreen | DoBlue;
		}
	}
	else
		ReadClutFile(fname,colors);
	if (debug_flag)
		fprintf(stderr,"Colormap size %d\n",ncolors);
	if (*newmap_flag) {
		cmap = XCreateColormap(dpy,root_win,visual,AllocAll);
		XStoreColors(dpy,cmap,colors,ncolors);
	}
	else {
		cmap = XDefaultColormap(dpy,screen);
		for (i=0;i<ncolors;i++) {
			if (XAllocColor(dpy,cmap,&colors[i]) == 0) {
				fprintf(stderr,
				    "Too many colors %d - new map made\n",i);
				cmap2 = XCopyColormapAndFree(dpy,cmap);
				*newmap_flag = TRUE;
				for (;i<ncolors;i++)
					XAllocColor(dpy,cmap2,&colors[i]);
				cmap = cmap2;
				break;
			}
		}
		for (i=0;i<bufsize;i++)
			buf[i] = (byte) colors[buf[i]].pixel;
	}
	if (*newmap_flag) {
		whitepixel = GetColorValue(cmap,ncolors,255,255,255);
		blackpixel = GetColorValue(cmap,ncolors,0,0,0);
	}
	if (debug_flag)
		for (i=0;i<ncolors;i++) {
			qcolor.pixel = (u_long) i;
			XQueryColor(dpy,cmap,&qcolor);
			fprintf(stderr,
				"color[%3d]: pix %3u r= %5u g= %5u b= %5u\n",i,
				qcolor.pixel,qcolor.red,qcolor.green,
				qcolor.blue);
		}
	return (cmap);
}

Colormap GetColormap24(colors,ncolors,newmap_flag,buf,bufsize)

XColor colors[];
int ncolors;
h_boolean *newmap_flag;
register byte *buf;
unsigned bufsize;

{
	register i;
	int j;
	Colormap cmap,cmap2;
	XColor qcolor;
	Status statval;
	unsigned long rmask,gmask,bmask;
	int nreds,ngreens,nblues;
	unsigned long pixels[256];
	XColor colvals[256];
	h_boolean contig;
	u_long GetColorValue();

	if (ncolors > XDisplayCells(dpy,screen))	/* an X nonfeature */
		ncolors = XDisplayCells(dpy,screen);
	if (debug_flag)
		fprintf(stderr,"Colormap size %d\n",ncolors);
	cmap = XCreateColormap(dpy,root_win,visual,AllocAll);
	contig = TRUE;
	nreds = ngreens = nblues = 0;	/* number of planes for r,g and b */
	for (i = 0; i < ncolors; i++) {
		colors[i].pixel = (u_long) i;
		j = 256 * ((ncolors == 64) ? i * 4 : i);
		colors[i].red = colors[i].green = colors[i].blue = (u_short) j;
		colors[i].flags = DoRed;
	}
	XStoreColors(dpy,cmap,colors,ncolors);
	for (i = 0; i < ncolors; i++) {
		colvals[i].pixel = (u_long) ((i << 8) & 0xFF00);
		j = 256 * ((ncolors == 64) ? i * 4 : i);
		colvals[i].red = colvals[i].green = colvals[i].blue =
			(u_short) j;
		colvals[i].flags = DoGreen;
	}
	XStoreColors(dpy,cmap,colvals,ncolors);
	for (i = 0; i < ncolors; i++) {
		colvals[i].pixel = (u_long) ((i << 16) & 0xFF0000);
		j = 256 * ((ncolors == 64) ? i * 4 : i);
		colvals[i].red = colvals[i].green = colvals[i].blue =
			(u_short) j;
		colvals[i].flags = DoBlue;
	}
	XStoreColors(dpy,cmap,colvals,ncolors);
	whitepixel = GetColorValue(cmap,ncolors,255,255,255);
	blackpixel = GetColorValue(cmap,ncolors,0,0,0);
	if (debug_flag) {
		for (i = 0; i < ncolors; i++) {
			qcolor.pixel = (u_long) i;
			XQueryColor(dpy,cmap,&qcolor);
			fprintf(stderr,
				"color[%3d]: pix %3u r= %5u g= %5u b= %5u\n",i,
				qcolor.pixel,qcolor.red,qcolor.green,
				qcolor.blue);
		}
		for (i = 0; i < ncolors; i++) {
			qcolor.pixel = (u_long) ((i << 8) & 0xFF00);
			XQueryColor(dpy,cmap,&qcolor);
			fprintf(stderr,
				"color[%3d]: pix %3u r= %5u g= %5u b= %5u\n",i,
				qcolor.pixel,qcolor.red,qcolor.green,
				qcolor.blue);
		}
		for (i = 0; i < ncolors; i++) {
			qcolor.pixel = (u_long) ((i << 16) & 0xFF0000);
			XQueryColor(dpy,cmap,&qcolor);
			fprintf(stderr,
				"color[%3d]: pix %3u r= %5u g= %5u b= %5u\n",i,
				qcolor.pixel,qcolor.red,qcolor.green,
				qcolor.blue);
		}
	}
	return (cmap);
}

Colormap GetColormapThresh(colors,newmap_flag,rgbzbuf,buf,bufsize)

XColor colors[];
h_boolean *newmap_flag;
register int *rgbzbuf;
register byte *buf;
unsigned bufsize;

{
	XColor clrs[256];
	register i,j;
	byte *value;
	int ncolors = 256;
	Colormap cmap;
	XColor qcolor;
	u_long GetColorValue();

	if (ncolors > XDisplayCells(dpy,screen))	/* an X nonfeature */
		ncolors = XDisplayCells(dpy,screen);
	for (i=0;i<ncolors;i++) {
		colors[i].pixel = (u_long) i;
		j = 256 * ((ncolors == 64) ? i * 4 : i);
		colors[i].blue = (u_short) ((j & 0xC000));
		colors[i].green = (u_short) ((j & 0x3800) << 2);
		colors[i].red = (u_short) ((j & 0x0700) << 5);
		colors[i].flags = DoRed | DoGreen | DoBlue;
	}
	for (i=0;i<bufsize;i++) {
		value = (byte *) (rgbzbuf+i);
		buf[i] = (char) ((value[2] & 0300) |
			((value[1] >> 2) & 070) |
			((value[0] >> 5) & 07));
	}
	if (debug_flag)
		fprintf(stderr,"Colormap size %d\n",ncolors);
	if (*newmap_flag) {
		cmap = XCreateColormap(dpy,root_win,visual,AllocAll);
		XStoreColors(dpy,cmap,colors,ncolors);
	}
	else
		error("GetColormapThresh: unknown mode\n","");
	if (*newmap_flag) {
		whitepixel = GetColorValue(cmap,ncolors,255,255,255);
		blackpixel = GetColorValue(cmap,ncolors,0,0,0);
	}
	if (debug_flag)
		for (i=0;i<ncolors;i++) {
			qcolor.pixel = (u_long) i;
			XQueryColor(dpy,cmap,&qcolor);
			fprintf(stderr,
				"color[%3d]: pix %3u r= %5u g= %5u b= %5u\n",i,
				qcolor.pixel,qcolor.red,qcolor.green,
				qcolor.blue);
		}
	return (cmap);
}

/* Find the the closest color in the colormap.  */

u_long GetColorValue(cmap,ncolors,red,green,blue)
Colormap cmap;
int ncolors,red,green,blue;

{
	register i,red2,blue2,green2;
	XColor qcolor;
	u_long value;
	long dist,least = 1e5;

	for (i=0;i<ncolors;i++) {
		qcolor.pixel = (u_long) i;
		XQueryColor(dpy,cmap,&qcolor);
		red2 = (int) qcolor.red / 257;
		green2 = (int) qcolor.green / 257;
		blue2 = (int) qcolor.blue / 257;
		dist = ((red2 - red) * (red2 - red)) +
			((green2 - green) * (green2 - green)) +
			((blue2 - blue) * (blue2 - blue));
		if (dist == 0)
			return (qcolor.pixel);
		else if (dist < least) {
			least = dist;
			value = qcolor.pixel;
		}
	}
	return (value);
}

/*  A most tragic and fatal error.  */

error(s1,s2)

char *s1,*s2;		/* Error description string. */

{
	extern int errno,sys_nerr;
	extern char *sys_errlist[];

	fprintf(stderr,"%c%s: Error =>\n%c",7,Progname,7);
	fprintf(stderr,s1,s2);
	if ((errno > 0) && (errno < sys_nerr))
		fprintf(stderr," (%s)",sys_errlist[errno]);
	fprintf(stderr,"\n");
	exit(1);
}

ReadClutFile(fileName,clrs)

char *fileName;
XColor clrs[];

{
	int i,count,size;
	byte r[256],g[256],b[256];

	readcmap(fileName,256,&count,r,g,b);
	for (i=0;i<count;i++) {
		clrs[i].pixel = (unsigned long) i;
		clrs[i].flags = DoRed | DoGreen | DoBlue;
		clrs[i].red = 256*r[i];
		clrs[i].green = 256*g[i];
		clrs[i].blue = 256*b[i];
	}
	for (i=count+1;i<256;i++) {	/* kludge to turn off other windows */
		clrs[i].pixel = (unsigned long) i;
		clrs[i].flags = DoRed | DoGreen | DoBlue;
		clrs[i].red = clrs[i].green = clrs[i].blue = 0;
	}
}
