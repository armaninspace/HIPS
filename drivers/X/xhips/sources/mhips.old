/*
 * mhips - display a single HIPS image on a Mac under X11
 *
 * usage:	mhips [-d display] [-l lut-file] [-L framelabel]
 *
 * Mhips displays a single frame (including the first frame of a
 * movie) under X11. It uses the X11 parameters required for a Mac
 * under OSX circa 2009 (i.e., a "TRUECOLOR" X11 visual and a color
 * byte order corresponding to HIPS color format ZRGB), and thus may
 * work on other machines for which TRUECOLOR is available and this
 * byte order works. The -d indicates the X11 server on which to
 * display. The -l flag provides a lookup table (for pseudocolor for
 * byte-formatted single-color images, and used separately on each
 * color channel for color images) in the same format as required
 * by addcmap. This lookup table will override a lookup table in the
 * image itself. If -l is not specified and the image has a lookup table,
 * it will be used. The -L flag provides a text label for the window;
 * otherwise the input filename will be used.
 *
 * to load:		cc -o mhips mhips.c -lX11 -lhipsh -lhips -lm
 *
 * Written based on xhips/xhipsc - msl - 1/12/09
 */

/***********************************************************************
*  File:   xhipsc.c
*  Author: Patrick J. Flynn,from `xim.c' by Philip Thompson
*  $Date: $
*  $Revision: $
*  Purpose: To view a HIPS-formatted image.
*
*  I (PJF) consider this a derivative of `xim',and include the original
*  copyright notice.
*
*  Copyright (c) 1988  Philip R. Thompson
*                Computer Resource Laboratory (CRL)
*                Dept. of Architecture and Planning
*                M.I.T.,Rm 9-526
*                Cambridge,MA  02139
*   This  software and its documentation may be used,copied,modified,
*   and distributed for any purpose without fee,provided:
*       --  The above copyright notice appears in all copies.
*       --  This disclaimer appears in all source code copies.
*       --  The names of M.I.T. and the CRL are not used in advertising
*           or publicity pertaining to distribution of the software
*           without prior specific written permission from me or CRL.
*   I provide this software freely as a public service.  It is NOT a
*   commercial product,and therefore is not subject to an an implied
*   warranty of merchantability or fitness for a particular purpose.  I
*   provide it as is,without warranty. This software was not sponsored,
*   developed or connected with any grants,funds,salaries,etc.
*
*   This software is furnished  only on the basis that any party who
*   receives it indemnifies and holds harmless the parties who furnish
*   it against any claims,demands,or liabilities connected with using
*   it,furnishing it to others,or providing it to a third party.
*
*   Philip R. Thompson (phils@athena.mit.edu)
***********************************************************************/

#include <X11/Xlib.h>
#include <X11/Xutil.h>
#include <stdio.h>
#include <stdlib.h>
#include <hipl_format.h>

static Flag_Format flagfmt[] = {
	{"d",{LASTFLAG},1,{{PTBOOLEAN,"FALSE"},{PTSTRING,"","display"},
		LASTPARAMETER}},
	{"l",{LASTFLAG},1,{{PTBOOLEAN,"FALSE"},{PTFILENAME,"","lut-file"},
		LASTPARAMETER}},
	{"L",{LASTFLAG},1,{{PTBOOLEAN,"FALSE"},{PTSTRING,"","framelabel"},
		LASTPARAMETER}},
	LASTFLAG};
int types[] = {PFBYTE,PFZRGB,LASTTYPE};

main(argc,argv)
int argc;
char **argv;

{
	struct header hd,hdp,hdg,hdb;
	int i,j,k,method,nc,nr,npix,count,count1,ovflow=0,screen,visualsMatched;
	byte *img,*oimg,r[256],g[256],b[256],*prlut,*pglut,*pblut,*pr,*pg,*pb,*po,*ppr,*ppg,*ppb,pix;
	char *display_name,*framelabel,*clutFileName;
	h_boolean dflag,Lflag,lflag,zrgbim_flag,threecol,hascmap;
	u_long blackpixel,whitepixel;
	Display *dpy;
	Window root_win,image_win;
	Visual *visual;
	XEvent event;
	GC image_gc;
	XGCValues gc_val;
	XSetWindowAttributes xswa;
	XImage *image;
	XSizeHints sizehints;
	FILE *fp;
	Filename filename;
	XVisualInfo vTemplate,*visualList;

	Progname = strsave(*argv);
	parseargs(argc,argv,flagfmt,&dflag,&display_name,&lflag,&clutFileName,
		&Lflag,&framelabel,FFONE,&filename);
	if (!dflag)
		display_name = NULL;

/* Open the display & set defaults */

	if ((dpy = XOpenDisplay(display_name)) == NULL) {
		fprintf(stderr,"%s: Can't open display '%s'\n",Progname,XDisplayName(display_name));
		exit(1);
	}
	screen = XDefaultScreen(dpy);
	root_win = XDefaultRootWindow(dpy);

/* Read header and verify image file formats */

	fp = hfopenr(filename);
	fread_hdr_a(fp,&hd);
	hascmap = (findparam(&hd,"cmap") != NULLPAR);
	method = fset_conversion(&hd,&hdp,types,filename);
	fread_imagec(fp,&hd,&hdp,method,0,filename);
	nc = hd.ocols;
	nr = hd.orows;
	npix = nr*nc;
	img = hdp.image;
	zrgbim_flag = (hdp.pixel_format == PFZRGB);
	if (zrgbim_flag)
		oimg = img;
	else {
		oimg = (byte *) halloc(npix,4*sizeof(byte));
		if (hd.numcolor == 3) {
			dup_headern(&hdp,&hdg);
			alloc_image(&hdg);
			dup_headern(&hdp,&hdb);
			alloc_image(&hdb);
		}
	}

/* get visual */

	vTemplate.screen = screen;
	vTemplate.class = TrueColor;
	vTemplate.depth = 24;
	visualList = XGetVisualInfo(dpy,VisualScreenMask | VisualClassMask |
		VisualDepthMask,&vTemplate,&visualsMatched);
	if (visualsMatched == 0) {
		fprintf(stderr,"%s: couldn't get a 24-bit TrueColor Visual\n",Progname);
		exit(1);
	}
	visual = visualList[0].visual;
	blackpixel = XBlackPixel(dpy,screen);
	whitepixel = XWhitePixel(dpy,screen);
	
/* get color lookup table */

	if (lflag) {
		readcmap(clutFileName,256,&count,r,g,b);
		prlut = r; pglut = g; pblut = b;
	}
	else if (hascmap) {
		count = 768;
		getparam(&hd,"cmap",PFBYTE,&count,&prlut);
		if (count % 3)
			perr(HE_MSG,"colormap length not a multiple of 3");
		count /= 3;
		pglut = prlut + count;
		pblut = pglut + count;
	}

/* process byte images if needed and store the image */

	if (zrgbim_flag) {			/* ZRGB image: do LUT in place */
		if (lflag || hascmap) {
			count1 = count - 1;
			ppr = img;
			for (i=0;i<npix;i++) {
				ppr++;	/* skip Z byte */
				pix = *ppr;
				if (pix > count1) {
					*ppr++ = prlut[count1];
					ovflow++;
				}
				else {
					*ppr++ = prlut[pix];
				}
				pix = *ppr;
				if (pix > count1) {
					*ppr++ = pglut[count1];
					ovflow++;
				}
				else {
					*ppr++ = pglut[pix];
				}
				pix = *ppr;
				if (pix > count1) {
					*ppr++ = pblut[count1];
					ovflow++;
				}
				else {
					*ppr++ = pblut[pix];
				}
			}
		}
	}
	else {					/* PFBYTE image, so copy to ZRGB output */
		if (hdp.numcolor == 3) {	/* 3 separate color planes */
			fread_imagec(fp,&hd,&hdg,method,0,filename);
			fread_imagec(fp,&hd,&hdb,method,0,filename);
			pr = hdp.image;
			pg = hdg.image;
			pb = hdb.image;
			if (lflag || hascmap) {
				h_applylut_B(pr,pr,nr,nc,nc,nc,count,prlut);
				ovflow += hips_hclip;
				h_applylut_B(pg,pg,nr,nc,nc,nc,count,pglut);
				ovflow += hips_hclip;
				h_applylut_B(pb,pb,nr,nc,nc,nc,count,pblut);
				ovflow += hips_hclip;
			}
			ppr = pr; ppg = pg; ppb = pb; po = oimg;
			for (i=0;i<npix;i++) {
				*po++ = 0;
				*po++ = *ppr++;
				*po++ = *ppg++;
				*po++ = *ppb++;
			}
		}
		else if (lflag || hascmap) {	/* PFBYTE pseudocolor */
			count1 = count - 1;
			ppr = img; po = oimg;
			for (i=0;i<npix;i++) {
				pix = *ppr++;
				*po++ = 0;
				if (pix > count1) {
					*po++ = prlut[count1];
					*po++ = pglut[count1];
					*po++ = pblut[count1];
					ovflow++;
				}
				else {
					*po++ = prlut[pix];
					*po++ = pglut[pix];
					*po++ = pblut[pix];
				}
			}
		}
		else {						/* grayscale image */
			ppr = img; po = oimg;
			for (i=0;i<npix;i++) {
				*po++ = 0;
				*po++ = *ppr;
				*po++ = *ppr;
				*po++ = *ppr++;
			}
		}
	}
	if (ovflow)
		fprintf(stderr,"%s: %d lookup-table overflows\n",Progname,ovflow);
	image = XCreateImage(dpy,visual,(unsigned) 24,ZPixmap,0,
		(char *) oimg,nc,nr,8,0);

/* Create window */

	xswa.event_mask = ExposureMask | ButtonPressMask;
	xswa.background_pixel = blackpixel;
	xswa.border_pixel = blackpixel;
	image_win = XCreateWindow(dpy,root_win,0,0,nc,nr,5,24,
		InputOutput,visual,CWBackPixel | CWEventMask | CWBorderPixel,&xswa);
	xswa.border_pixel = 1;	/* MAC hardwired */
	XSetWindowBorder(dpy,image_win,xswa.border_pixel);

 /* set window manager hints */
	sizehints.flags = PSize | PMinSize | PMaxSize;
	sizehints.width = sizehints.min_width = nc;
	sizehints.max_width = nc;
	sizehints.height = sizehints.min_height = nr;
	sizehints.max_height = nr;
	j = strlen(filename);
	k = 0;
	for (i=0;i<j;i++)
		if (filename[i]=='/')
			k = i+1;
	XSetStandardProperties(dpy,image_win,Lflag ? framelabel : (filename+k),
		NULL,None,argv,argc,&sizehints);
	gc_val.function = GXcopy;
	gc_val.plane_mask = AllPlanes;
	gc_val.foreground = blackpixel;
	gc_val.background = blackpixel;
	image_gc = XCreateGC(dpy,image_win,GCFunction | GCPlaneMask |
		GCForeground | GCBackground,&gc_val);
	XMapWindow(dpy,image_win);	/* Map the image window. */

 /* Select events to listen for  */

	XSelectInput(dpy,image_win,ExposureMask | ButtonPressMask);
	while (1) {	/* Set up a loop to maintain the image. */
		XNextEvent(dpy,&event);	/* Wait on input event. */
		switch ((int) event.type) {
		case Expose:
			XPutImage(dpy,image_win,image_gc,image,0,0,0,0,nc,nr);
			break;
		case ButtonPress:
			switch ((int) event.xbutton.button) {
			case Button1:
				break;
			case Button2:
				break;
			case Button3:
				XDestroyWindow(dpy,image_win);
				XCloseDisplay(dpy);
				exit(0);
			}
			break;
		default:
			fprintf(stderr,"Bad X event.\n");
		}
	}
}
