/*	Copyright (c) 1989 Michael Landy

Disclaimer:  No guarantees of performance accompany this software,
nor is any responsibility assumed on the part of the authors.  All the
software has been tested extensively and every effort has been made to
insure its reliability.   */

/* portmovie - to transfer images to Adage in real time (60 fps) using viewport.
 *
 * arguments and defaults -- as those for "wframe",
 *		-[number]  causes the movie to run "number" times and
 *			then return control (e.g. "-1", for one time only).
 *		-r starts the Betamax just prior to outputting.
 *		-c outputs a cue spot before running the movie.
 *		-p repeats the first frame 60/lapse times.
 *		-b adds a blank frame at the end.
 *		-u "unsync", cancels the sync feature.
 *		-a 'all' is shorthand for -s -r -p -b.
 *		-ln time lapse, slows the movie down (in synced mode only) by a
 *			factor of 'n', where n is an integer.
 *		-S step the movie frame by frame (use 'x' to exit,
 *			and 'b' for backwards step), always unsynced
 *		-tTwinfile twin movies run interlaced.
 *		-o red green blue, sets the color map for pixels which are one
 *			(for binary movies only)
 *		-z red green blue, sets the color map for pixels which are zero
 *			(for binary movies only)
 *		-g red green blue, sets the color map for background pixels
 *			(for binary movies only)
 *
 * usage:	portmovie [startrow [startcol]]
 *				[-number][-r][-c][-p][-b][-u][-a][-ln][-S]
 *				[-o r g b][-z r g b][-g r g b]
 *				[-tfilename]
 *					< input_sequence
 *
 * Note that for binary movies, the starting column is truncated to an integer
 * multiple of 32, and number of columns in each frame is rounded up to the
 * nearest integer multiple of 32.  Also note that in binary movies, no frames
 * may cross the 1023 to 1024 column boundary (because word mode writes in 
 * hi resolution mode don't cross this boundary correctly - the high x bit is
 * elsewhere in the address); thus, the number of frames per column is twice
 * that for 1024, and the frame that would have crossed that boundary is 
 * bumped to be 1024.  The program gives glitches in
 * the output given the fact that INVISIBLEIO doesn't appear to work for 
 * write to the FBC viewport registers.
 *
 * to load:	cc -o portmovie portmovie.c -lhips -lIkonas
 *
 * Mike Landy - 7/12/85
 *
 * Note:	extensive test should be added
 *		(e.g. open /dev/gr; write's; arguments etc.)
 */

#include <hipl_format.h>
#include <stdio.h>
#include <sys/ikio.h>
#include <vaxuba/drcmd.h>
#include <graphics/ik_const.h>

#define	strow(imageno) ((imageno / numfcol) * outr)
#define	stcolb(imageno) ((((imageno % numfcol) < numfcol2) ? 0 : 1024) + \
			((imageno % numfcol2) * movoutc))
#define	stcoln(imageno) ((imageno % numfcol) * movoutc)
#define stcol(imageno) (binary ? stcolb(imageno) : stcoln(imageno))

#define	setport(imageno,screenrow,screencol,width,height,binary) \
		Ik_set_port(strow(imageno),stcol(imageno),screenrow, \
			screencol,width,height,1,1, \
			((binary) ? IK_60NON_HIRES : IK_60NON_LORES));
int binary = 0;
int single = -1;
int osingle = -1;
int cuesw = 0;
int recsw = 0;
int psw = 0;
int blanksw = 0;
int unsync = 0;
int lapse = 1;
int twin = 0;
int ss = 0;
int loop = 0;
int ir = 0, ic = 0;
int rg=0, gg=0, bg=0;
int r0=0, g0=0, b0=0;
int r1=1020, g1=1020, b1=1020;
char *store;

main(argc,argv)

int argc;
char *argv[];

{
	extern int Ikonas;
	char *st,*ifr,*pifr,k[11],*tfile;
	int i,j,ii,jj,numf,frame;
	int air,sptr,extras,r,c,rcb,f,blankptr,cueptr;
	int numfcol,numfrow,fcol,frow,outr,outc,movoutc,outrcb,numoutf,conv;
	int numfcol2,cb,ocb;
	int lastrc,currarg;
	struct 	header hd,hd1;
	int fd,fd2;
	FILE *FP3,*fp;

	Progname = strsave(*argv);
	read_header(&hd);
	lastrc = argc-1;
	currarg = 1;
	while (currarg < argc) {
	    if (argv[currarg][0]=='-') {
		if (lastrc > currarg-1)
			lastrc = currarg-1;
		switch (argv[currarg][1]) {
		case 'D':	break;
		case '0':
		case '1':
		case '2':
		case '3':
		case '4':
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':	osingle=single=atoi(&argv[currarg][1]);
				break;
		case 'c':	cuesw++;
				break;
		case 'r':	recsw++;
				break;
		case 'p':	psw++;
				break;
		case 'b':	blanksw++;
				break;
		case 'u':	unsync++;
				break;
		case 'l':	lapse = atoi(&argv[currarg][2]);
				if (lapse < 1)
					perr(HE_MSG,"-l parameter must be > 0");
				break;
		case 'S':	ss++;
				if ((FP3 = fopen("/dev/tty","r")) == NULL)
					perr(HE_MSG,"can't open tty!");
				break;
		case 't':	if ((fp = fopen(&argv[currarg][2],"r")) == NULL)
				    perr(HE_MSG,"can't open twin file -t ignored");
				else
				    twin++;
				tfile = argv[currarg]+2;
				break;
		case 'a':	osingle=single=1;
				recsw++;
				psw++;
				blanksw++;
				break;
		case 'o':	if (currarg+3 >= argc)
					perr(HE_MSG,"-o takes r g b as arguments");
				r1 = atoi(argv[currarg+1]);
				g1 = atoi(argv[currarg+2]);
				b1 = atoi(argv[currarg+3]);
				currarg += 3;
				break;
		case 'z':	if (currarg+3 >= argc)
					perr(HE_MSG,"-z takes r g b as arguments");
				r0 = atoi(argv[currarg+1]);
				g0 = atoi(argv[currarg+2]);
				b0 = atoi(argv[currarg+3]);
				currarg += 3;
				break;
		case 'g':	if (currarg+3 >= argc)
					perr(HE_MSG,"-g takes r g b as arguments");
				rg = atoi(argv[currarg+1]);
				gg = atoi(argv[currarg+2]);
				bg = atoi(argv[currarg+3]);
				currarg += 3;
				break;
		default:	fprintf(stderr,
					"portmovie: unrecognized option %1s\n",
					&argv[currarg][1]);
		}
	    }
	    currarg++;
	}
	if (twin) {
		ir = ((480-hd.orows)/2) & ~01;
		ic = (256-hd.ocols) & ~03;
	}
	else {
		ir = ((480-hd.orows)/2) & ~01;
		ic = ((512-hd.ocols)/2) & ~03;
	}
	if (lastrc>0)
		ir=(atoi(argv[1])) & ~01;
	if (lastrc>1)
		ic=(atoi(argv[2])) & ~03;

	if (hd.pixel_format != PFBYTE && hd.pixel_format != PFLSBF)
		perr(HE_MSG,"frame must be in byte or LSBF packed format");
	if (hd.pixel_format == PFLSBF)
		binary++;
	if (binary)
		ic &= ~037;
	r=hd.orows; cb=c=hd.ocols;
	outr = (r+1) & ~01;
	ocb = outc = (c + 3) & ~03;
	if (binary) {
		cb = (c + 7)/8;
		outc = (c + 31) & ~037;
		ocb = outc/8;
	}
	else {
		cb = c;
		outc = ocb = (c+1) & (~01);
	}
	movoutc = outc;
	rcb=r*cb;
	outrcb=outr*ocb;
	numoutf=f=hd.num_frame;
	if (twin) {
		fread_header(fp,&hd1,tfile);
		if (r!=hd1.orows || c!=hd1.ocols || f!=hd1.num_frame
		    || hd.pixel_format!=hd1.pixel_format)
			perr(HE_MSG,"twin sequences inconsistent");
		movoutc *= 2;
	}

	numoutf += ((blanksw || cuesw) ? 1 : 0) + (cuesw ? 1 : 0);
	numfcol = binary ? ((1024/movoutc)*2) : (1024/movoutc);
	numfcol2 = numfcol/2;
	numfrow = binary ? (2048/outr) : (1024/outr);
	if (numfcol*numfrow < numoutf)
		perr(HE_MSG,"can't fit sequence in Adage memory");
	if ((store=(char *)calloc(outrcb,sizeof(char))) == 0) 
		perr(HE_MSG,"not enough core");
	extras = (psw ? ((60/lapse)-1) : 0);
	fprintf(stderr,"portmovie: %d frames per transfer\n",numoutf+extras);
	blankptr = f;
	cueptr = f + 1;

	st = store;
	for (i=0;i<outrcb;i++)
		*st++ = 0;

	if (cb!=ocb) {
		if ((ifr = (char *) calloc(rcb,sizeof(char))) == 0)
			perr(HE_MSG,"can't allocate input frame core");
		conv = 1;
	}
	else {
		conv = 0;
		ifr = store;
	}

	Ik_open();
	if (binary) {
		Ik_init(IK_60NON_HIRES);
		Ik_cput_entry(0,0,rg,gg,bg);
		Ik_cput_entry(0,252,r0,g0,b0);
		Ik_cput_entry(0,253,r1,g1,b1);
		Ik_cput_entry(0,254,r0,g0,b0);
		Ik_cput_entry(0,255,r1,g1,b1);
	}
	else {
		Ik_init(IK_60NON_LORES);
		Ik_cload_map(0,0);
	}

	/*
	 * clear screen by setting viewport to the right of the actual
	 * screen area.  This can also be done by setting the mini xbar to 333.
	 */

	setport(0,0,612,32,32,binary);

	if (binary)
		Ik_set_mode(SET_32_BIT_MODE);
	else
		Ik_set_mode(SET_8_BIT_MODE);

	if (blanksw || cuesw) {
		fcol = stcol(blankptr);
		frow = strow(blankptr);
		if (binary) {
			Ik_windowdma(fcol,ocb,IK_WDHXY_ADDR);
			i = HI_WORDXYH(02,0,(fcol>>5),frow);
			j = LO_WORDXYH(02,0,(fcol>>5),frow);
			Ik_dmawr8(IK_WD_ADDR,i,j,store,outrcb);
			if (twin) {
				fcol += outc;
				Ik_windowdma(fcol,ocb,IK_WDHXY_ADDR);
				i = HI_WORDXYH(02,0,(fcol>>5),frow);
				j = LO_WORDXYH(02,0,(fcol>>5),frow);
				Ik_dmawr8(IK_WD_ADDR,i,j,store,outrcb);
			}
		}
		else {
			Ik_windowdma(fcol,ocb,IK_XY_ADDR);
			Ik_dmawr8(IK_XY_ADDR,fcol,frow,store,outrcb);
			if (twin) {
				fcol += outc;
				Ik_windowdma(fcol,ocb,IK_XY_ADDR);
				Ik_dmawr8(IK_XY_ADDR,fcol,frow,store,outrcb);
			}
		}
	}
	if (cuesw) {
		if (binary) {
		    ii = (r < 8) ? r : 8;
		    for (i=0;i<ii;i++)
			store[((r/2)-(ii/2)+i)*ocb+(ocb/2)]=255;
		}
		else {
		    ii = (r < 8) ? r : 8;
		    jj = (c < 8) ? c : 8;
		    for (i=0;i<ii;i++)
			for (j=0;j<jj;j++)
				store[((r/2)-(ii/2)+i)*c+((c/2)-(jj/2)+j)]=228;
		}
		fcol = stcol(cueptr);
		frow = strow(cueptr);
		if (binary) {
			Ik_windowdma(fcol,ocb,IK_WDHXY_ADDR);
			i = HI_WORDXYH(02,0,(fcol>>5),frow);
			j = LO_WORDXYH(02,0,(fcol>>5),frow);
			Ik_dmawr8(IK_WD_ADDR,i,j,store,outrcb);
			if (twin) {
				fcol += outc;
				Ik_windowdma(fcol,ocb,IK_WDHXY_ADDR);
				i = HI_WORDXYH(02,0,(fcol>>5),frow);
				j = LO_WORDXYH(02,0,(fcol>>5),frow);
				Ik_dmawr8(IK_WD_ADDR,i,j,store,outrcb);
			}
		}
		else {
			Ik_windowdma(fcol,ocb,IK_XY_ADDR);
			Ik_dmawr8(IK_XY_ADDR,fcol,frow,store,outrcb);
			if (twin) {
				fcol += outc;
				Ik_windowdma(fcol,ocb,IK_XY_ADDR);
				Ik_dmawr8(IK_XY_ADDR,fcol,frow,store,outrcb);
			}
		}
	}

	for (frame=0;frame<f;frame++) {
		if (fread(ifr,rcb*sizeof(char),1,stdin) != 1)
			perr(HE_MSG,"error reading primary input");
		if (conv) {
			st = store;
			pifr = ifr;
			for (i=0;i<r;i++) {
				for (j=0;j<cb;j++) {
					*st++ = *pifr++;
				}
				st += ocb-cb;
			}
		}
		fcol = stcol(frame);
		frow = strow(frame);
		if (binary) {
			Ik_windowdma(fcol,ocb,IK_WDHXY_ADDR);
			i = HI_WORDXYH(02,0,(fcol>>5),frow);
			j = LO_WORDXYH(02,0,(fcol>>5),frow);
			Ik_dmawr8(IK_WD_ADDR,i,j,store,outrcb);
		}
		else {
			Ik_windowdma(fcol,ocb,IK_XY_ADDR);
			Ik_dmawr8(IK_XY_ADDR,fcol,frow,store,outrcb);
		}
	}
	if (twin) {
		for (frame=0;frame<f;frame++) {
			if (fread(ifr,rcb*sizeof(char),1,fp)!=1)
				perr(HE_MSG,"error reading primary input");
			if (conv) {
				st = store;
				pifr = ifr;
				for (i=0;i<r;i++) {
					for (j=0;j<cb;j++) {
						*st++ = *pifr++;
					}
					st += ocb-cb;
				}
			}
			fcol = stcol(frame) + outc;
			frow = strow(frame);
			if (binary) {
				Ik_windowdma(fcol,ocb,IK_WDHXY_ADDR);
				i = HI_WORDXYH(02,0,(fcol>>5),frow);
				j = LO_WORDXYH(02,0,(fcol>>5),frow);
				Ik_dmawr8(IK_WD_ADDR,i,j,store,outrcb);
			}
			else {
				Ik_windowdma(fcol,ocb,IK_XY_ADDR);
				Ik_dmawr8(IK_XY_ADDR,fcol,frow,store,outrcb);
			}
		}
		fclose(fp);
	}
	Ik_set_mode(SET_32_BIT_MODE | SET_DURING_RETRACE);

	if (recsw) {
		ii=0177377;	/* put betamax in motion */
		fd2=open("/dev/dr",2);lseek(fd2,(long) 2,0); write(fd2,&ii,2);
		Ik_delay(60);
		ii=0177777; lseek(fd2,(long) 2,0);write(fd2,&ii,2); close(fd2);
	}
	if (cuesw) {
		setport(cueptr,ir,ic,outr,movoutc,binary);
		Ik_delay(60);
		Ik_delay(60);
		setport(blankptr,ir,ic,outr,movoutc,binary);
		Ik_delay(60);
		Ik_delay(60);
	}

	do {
		numf = f + extras;
		if (blanksw && single == 1)
			numf++;
		for (frame=0;frame<numf;frame++) {
			if (frame < extras)
				sptr = 0;
			else if (frame >= f + extras)
				sptr = blankptr;
			else
				sptr = frame - extras;

			setport(sptr,ir,ic,outr,movoutc,binary);
			if (ss!=0 && loop==0) {
				fprintf(stderr,"%d",frame);
				fgets(k,10,FP3);
				if (*k=='x')
					loop=1;
				else if (*k=='b') {
					if (frame > 0)
						frame -=2;
					else
						frame--;
				}
			}
			if (ss == 0 || unsync)
				Ik_delay(lapse);
		}
		loop = 0;
	} while (--single != 0);

	exit(0);
}
