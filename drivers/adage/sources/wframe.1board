/*	Copyright (c) 1989 Michael Landy

Disclaimer:  No guarantees of performance accompany this software,
nor is any responsibility assumed on the part of the authors.  All the
software has been tested extensively and every effort has been made to
insure its reliability.   */

/*
 * wframe.c - write a frame on the Adage
 *
 * Usage:	wframe [initialrow [initialcolumn]] [-v] < frame
 *
 * Defaults:	centered in the first 512x512
 *
 * Load:	cc -o wframe wframe.c -lhips
 *
 * Michael Landy - 6/22/85
 *
 * (initialrow, initialcolumn) specifies the screen position for 
 * frame coordinate (0,0).  Effective off-screen coordinates are lost,
 * so there is no wraparound.  Note that for bit-packed images, the image
 * will be extended with 0's to an integral multiple of 32 columns.  The -v
 * switch uses 30Hz video.
 */

#include <hipl_format.h>
#include <stdio.h>
#include <sys/ikio.h>
#include <graphics/ik_const.h>

int videosw=0;

main(argc,argv)

int argc;
char **argv;

{
	extern int Ikonas;
	int i,j,r,c,cb,ocb,ir,irr,ic;
	char *fr,*ofr,*pfr,*pofr;
	struct header hd;

	Progname = strsave(*argv);
	read_header(&hd);
	r = hd.orows;
	cb = c = hd.ocols;
	if (hd.pixel_format == PFLSBF)
		cb = (c+7)/8;
	if ((fr = (char *) calloc(r*cb,sizeof(char))) == 0)
		perr(HE_MSG,"can't allocate core");
	ir=(512-r)/2; ic=(512-c)/2;
	if (strcmp(argv[argc-1],"-v")==0) {
		videosw++;
		argc--;
	}
	if(argv[argc-1][0]=='-')argc--;
	if(argc>1) ir=atoi(argv[1]);
	if(argc>2) ic=atoi(argv[2]);
	if (hd.pixel_format != PFBYTE && hd.pixel_format != PFLSBF)
		perr(HE_MSG,"frame must be in byte or LSBF packed format");
	if (fread(fr,r*cb*sizeof(char),1,stdin) != 1)
		perr(HE_MSG,"error during read");

	Ik_open();
	if (hd.pixel_format == PFLSBF) {
		Ik_init(videosw ? IK_30INT_HIRES : IK_60NON_HIRES);
		Ik_cput_entry(0,252,0,0,0);
		Ik_cput_entry(0,253,255<<2,255<<2,255<<2);
		Ik_cput_entry(0,254,0,0,0);
		Ik_cput_entry(0,255,255<<2,255<<2,255<<2);

		Ik_set_mode(SET_32_BIT_MODE);
		if (cb & 03) {
			ocb = (cb + 4) & ~03;
			if ((ofr = (char *) calloc(r*ocb,sizeof(char))) == 0)
				perr(HE_MSG,"can't allocate output frame core");
			pofr = ofr; pfr = fr;
			for (i=0;i<r;i++) {
				for (j=0;j<ocb;j++) {
					if (j < cb)
						*pofr++ = *pfr++;
					else
						*pofr++ = 0;
				}
			}
		}
		else {
			ofr = fr;
			ocb = cb;
		}
		ic &= ~037;
		Ik_windowdma(ic,ocb,IK_WDHXY_ADDR);
		i = HI_WORDXYH(02,0,(ic>>5),ir);
		j = LO_WORDXYH(02,0,(ic>>5),ir);
		Ik_dmawr8(IK_WD_ADDR,i,j,ofr,r*ocb);
	}
	else {
		Ik_init(videosw ? IK_30INT_LORES : IK_60NON_LORES);
		Ik_cload_map(0,0);

		Ik_set_mode(SET_8_BIT_MODE);
		if (c & 01) {
			ocb = c + 1;
			if ((ofr = (char *) calloc(r*ocb,sizeof(char))) == 0)
				perr(HE_MSG,"can't allocate output frame core");
			pofr = ofr; pfr = fr;
			for (i=0;i<r;i++) {
				for (j=0;j<ocb;j++) {
					if (j < c)
						*pofr++ = *pfr++;
					else
						*pofr++ = 0;
				}
			}
		}
		else {
			ofr = fr;
			ocb = c;
		}
		Ik_windowdma(ic,ocb,IK_XY_ADDR);
		Ik_dmawr8(IK_XY_ADDR,ic,ir,ofr,r*ocb);
	}

	Ik_close();
	return(0);
}
